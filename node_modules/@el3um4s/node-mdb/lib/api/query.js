"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = void 0;
const path = require("path");
const fs = __importStar(require("fs/promises"));
const run_vbs_1 = require("@el3um4s/run-vbs");
const decode_mdb_strange_chars_1 = require("@el3um4s/decode-mdb-strange-chars");
const to_try_1 = require("@el3um4s/to-try");
const api_sql_1 = require("../vbs/api_sql");
const normalizeSQL = (sql) => {
    const result = sql
        .replaceAll("\r\n", "\n")
        .replaceAll("\n", " ")
        .replaceAll('"', "'");
    return result;
};
const sql = async (data) => {
    const vbs = api_sql_1.api_sql;
    const file = path.resolve(data.database);
    const sqlNormalized = normalizeSQL(data.sql);
    const resultQuery = await (0, run_vbs_1.runVbsBuffer)({
        vbs,
        args: [file, `"${sqlNormalized}"`, "JSON"],
    });
    const [resultDecoded] = (0, to_try_1.toTry)(() => {
        const decoded = (0, decode_mdb_strange_chars_1.decodeVBSBuffer)(resultQuery);
        const obj = JSON.parse(decoded);
        return obj.result;
    });
    return resultDecoded ? resultDecoded : [{}];
};
const sqlToFileJSON = async (data) => {
    const result = await sql({ database: data.database, sql: data.sql });
    const file = path.resolve(data.file);
    await fs.writeFile(file, JSON.stringify(result));
    return true;
};
const sqlToFileCSV = async (data) => {
    const vbs = api_sql_1.api_sql;
    const mdb = path.resolve(data.database);
    const sqlNormalized = normalizeSQL(data.sql);
    const result = await (0, run_vbs_1.runVbsBuffer)({
        vbs,
        args: [mdb, `"${sqlNormalized}"`, "CSV"],
    });
    const resultDecoded = (0, decode_mdb_strange_chars_1.decodeVBSBuffer)(result).trim();
    const file = path.resolve(data.file);
    await fs.writeFile(file, resultDecoded);
    return true;
};
exports.query = {
    sql,
    sqlToFileJSON,
    sqlToFileCSV,
};
